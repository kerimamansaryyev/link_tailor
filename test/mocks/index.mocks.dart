// Mocks generated by Mockito 5.4.4 from annotations
// in link_tailor/test/mocks/index.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dotenv/dotenv.dart' as _i5;
import 'package:dotenv/src/parser.dart' as _i7;
import 'package:link_tailor/src/injectable_config/register_module.dart' as _i8;
import 'package:link_tailor/src/prisma/generated/client.dart' as _i3;
import 'package:link_tailor/src/prisma/generated/model.dart' as _i9;
import 'package:link_tailor/src/prisma/generated/prisma.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:orm/orm.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMetricsClient_0 extends _i1.SmartFake implements _i2.MetricsClient {
  _FakeMetricsClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionClient_1<T> extends _i1.SmartFake
    implements _i2.TransactionClient<T> {
  _FakeTransactionClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinkDelegate_2 extends _i1.SmartFake implements _i3.LinkDelegate {
  _FakeLinkDelegate_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRawClient_3<T> extends _i1.SmartFake implements _i2.RawClient<T> {
  _FakeRawClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePrismaClient_4 extends _i1.SmartFake implements _i3.PrismaClient {
  _FakePrismaClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_5<T> extends _i1.SmartFake implements _i4.Future<T> {
  _FakeFuture_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActionClient_6<T> extends _i1.SmartFake
    implements _i2.ActionClient<T> {
  _FakeActionClient_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DotEnv].
///
/// See the documentation for Mockito's code generation for more information.
class MockDotEnv extends _i1.Mock implements _i5.DotEnv {
  @override
  bool get includePlatformEnvironment => (super.noSuchMethod(
        Invocation.getter(#includePlatformEnvironment),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get quiet => (super.noSuchMethod(
        Invocation.getter(#quiet),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Map<String, String> get map => (super.noSuchMethod(
        Invocation.getter(#map),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  String? operator [](String? key) => (super.noSuchMethod(
        Invocation.method(
          #[],
          [key],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  void addAll(Map<String, String>? other) => super.noSuchMethod(
        Invocation.method(
          #addAll,
          [other],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getOrElse(
    String? key,
    String Function()? orElse,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrElse,
          [
            key,
            orElse,
          ],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getOrElse,
            [
              key,
              orElse,
            ],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getOrElse,
            [
              key,
              orElse,
            ],
          ),
        ),
      ) as String);

  @override
  bool isDefined(String? key) => (super.noSuchMethod(
        Invocation.method(
          #isDefined,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isEveryDefined(Iterable<String>? vars) => (super.noSuchMethod(
        Invocation.method(
          #isEveryDefined,
          [vars],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void load([
    Iterable<String>? filenames = const [r'.env'],
    _i7.Parser? psr = const _i7.Parser(),
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #load,
          [
            filenames,
            psr,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PrismaClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrismaClient extends _i1.Mock implements _i3.PrismaClient {
  @override
  _i2.MetricsClient get $metrics => (super.noSuchMethod(
        Invocation.getter(#$metrics),
        returnValue: _FakeMetricsClient_0(
          this,
          Invocation.getter(#$metrics),
        ),
        returnValueForMissingStub: _FakeMetricsClient_0(
          this,
          Invocation.getter(#$metrics),
        ),
      ) as _i2.MetricsClient);

  @override
  _i2.TransactionClient<_i3.PrismaClient> get $transaction =>
      (super.noSuchMethod(
        Invocation.getter(#$transaction),
        returnValue: _FakeTransactionClient_1<_i3.PrismaClient>(
          this,
          Invocation.getter(#$transaction),
        ),
        returnValueForMissingStub: _FakeTransactionClient_1<_i3.PrismaClient>(
          this,
          Invocation.getter(#$transaction),
        ),
      ) as _i2.TransactionClient<_i3.PrismaClient>);

  @override
  _i3.LinkDelegate get link => (super.noSuchMethod(
        Invocation.getter(#link),
        returnValue: _FakeLinkDelegate_2(
          this,
          Invocation.getter(#link),
        ),
        returnValueForMissingStub: _FakeLinkDelegate_2(
          this,
          Invocation.getter(#link),
        ),
      ) as _i3.LinkDelegate);

  @override
  _i2.RawClient<_i3.PrismaClient> get $raw => (super.noSuchMethod(
        Invocation.getter(#$raw),
        returnValue: _FakeRawClient_3<_i3.PrismaClient>(
          this,
          Invocation.getter(#$raw),
        ),
        returnValueForMissingStub: _FakeRawClient_3<_i3.PrismaClient>(
          this,
          Invocation.getter(#$raw),
        ),
      ) as _i2.RawClient<_i3.PrismaClient>);

  @override
  _i4.Future<void> $connect() => (super.noSuchMethod(
        Invocation.method(
          #$connect,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> $disconnect() => (super.noSuchMethod(
        Invocation.method(
          #$disconnect,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PrismaClientFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrismaClientFactory extends _i1.Mock
    implements _i8.PrismaClientFactory {
  @override
  _i3.PrismaClient call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _FakePrismaClient_4(
          this,
          Invocation.method(
            #call,
            [],
          ),
        ),
        returnValueForMissingStub: _FakePrismaClient_4(
          this,
          Invocation.method(
            #call,
            [],
          ),
        ),
      ) as _i3.PrismaClient);
}

/// A class which mocks [TransactionClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionClient extends _i1.Mock
    implements _i2.TransactionClient<_i3.PrismaClient> {
  @override
  _i4.Future<_i3.PrismaClient> start({
    _i2.TransactionHeaders? headers,
    int? maxWait = 2000,
    int? timeout = 5000,
    _i2.TransactionIsolationLevel? isolationLevel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
          {
            #headers: headers,
            #maxWait: maxWait,
            #timeout: timeout,
            #isolationLevel: isolationLevel,
          },
        ),
        returnValue: _i4.Future<_i3.PrismaClient>.value(_FakePrismaClient_4(
          this,
          Invocation.method(
            #start,
            [],
            {
              #headers: headers,
              #maxWait: maxWait,
              #timeout: timeout,
              #isolationLevel: isolationLevel,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.PrismaClient>.value(_FakePrismaClient_4(
          this,
          Invocation.method(
            #start,
            [],
            {
              #headers: headers,
              #maxWait: maxWait,
              #timeout: timeout,
              #isolationLevel: isolationLevel,
            },
          ),
        )),
      ) as _i4.Future<_i3.PrismaClient>);

  @override
  _i4.Future<void> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> rollback() => (super.noSuchMethod(
        Invocation.method(
          #rollback,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<R> call<R>(
    _i4.Future<R> Function(_i3.PrismaClient)? fn, {
    int? maxWait = 2000,
    int? timeout = 5000,
    _i2.TransactionIsolationLevel? isolationLevel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [fn],
          {
            #maxWait: maxWait,
            #timeout: timeout,
            #isolationLevel: isolationLevel,
          },
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #call,
                  [fn],
                  {
                    #maxWait: maxWait,
                    #timeout: timeout,
                    #isolationLevel: isolationLevel,
                  },
                ),
              ),
              (R v) => _i4.Future<R>.value(v),
            ) ??
            _FakeFuture_5<R>(
              this,
              Invocation.method(
                #call,
                [fn],
                {
                  #maxWait: maxWait,
                  #timeout: timeout,
                  #isolationLevel: isolationLevel,
                },
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #call,
                  [fn],
                  {
                    #maxWait: maxWait,
                    #timeout: timeout,
                    #isolationLevel: isolationLevel,
                  },
                ),
              ),
              (R v) => _i4.Future<R>.value(v),
            ) ??
            _FakeFuture_5<R>(
              this,
              Invocation.method(
                #call,
                [fn],
                {
                  #maxWait: maxWait,
                  #timeout: timeout,
                  #isolationLevel: isolationLevel,
                },
              ),
            ),
      ) as _i4.Future<R>);
}

/// A class which mocks [LinkDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinkDelegate extends _i1.Mock implements _i3.LinkDelegate {
  @override
  _i2.ActionClient<_i9.Link?> findUnique({
    required _i10.LinkWhereUniqueInput? where,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findUnique,
          [],
          {
            #where: where,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i9.Link?>(
          this,
          Invocation.method(
            #findUnique,
            [],
            {
              #where: where,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i9.Link?>(
          this,
          Invocation.method(
            #findUnique,
            [],
            {
              #where: where,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i9.Link?>);

  @override
  _i2.ActionClient<_i9.Link> findUniqueOrThrow({
    required _i10.LinkWhereUniqueInput? where,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findUniqueOrThrow,
          [],
          {
            #where: where,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i9.Link>(
          this,
          Invocation.method(
            #findUniqueOrThrow,
            [],
            {
              #where: where,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i9.Link>(
          this,
          Invocation.method(
            #findUniqueOrThrow,
            [],
            {
              #where: where,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i9.Link>);

  @override
  _i2.ActionClient<_i9.Link?> findFirst({
    _i10.LinkWhereInput? where,
    _i2.PrismaUnion<Iterable<_i10.LinkOrderByWithRelationInput>,
            _i10.LinkOrderByWithRelationInput>?
        orderBy,
    _i10.LinkWhereUniqueInput? cursor,
    int? take,
    int? skip,
    _i2.PrismaUnion<_i10.LinkScalar<dynamic>,
            Iterable<_i10.LinkScalar<dynamic>>>?
        distinct,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findFirst,
          [],
          {
            #where: where,
            #orderBy: orderBy,
            #cursor: cursor,
            #take: take,
            #skip: skip,
            #distinct: distinct,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i9.Link?>(
          this,
          Invocation.method(
            #findFirst,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #cursor: cursor,
              #take: take,
              #skip: skip,
              #distinct: distinct,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i9.Link?>(
          this,
          Invocation.method(
            #findFirst,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #cursor: cursor,
              #take: take,
              #skip: skip,
              #distinct: distinct,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i9.Link?>);

  @override
  _i2.ActionClient<_i9.Link> findFirstOrThrow({
    _i10.LinkWhereInput? where,
    _i2.PrismaUnion<Iterable<_i10.LinkOrderByWithRelationInput>,
            _i10.LinkOrderByWithRelationInput>?
        orderBy,
    _i10.LinkWhereUniqueInput? cursor,
    int? take,
    int? skip,
    _i2.PrismaUnion<_i10.LinkScalar<dynamic>,
            Iterable<_i10.LinkScalar<dynamic>>>?
        distinct,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findFirstOrThrow,
          [],
          {
            #where: where,
            #orderBy: orderBy,
            #cursor: cursor,
            #take: take,
            #skip: skip,
            #distinct: distinct,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i9.Link>(
          this,
          Invocation.method(
            #findFirstOrThrow,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #cursor: cursor,
              #take: take,
              #skip: skip,
              #distinct: distinct,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i9.Link>(
          this,
          Invocation.method(
            #findFirstOrThrow,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #cursor: cursor,
              #take: take,
              #skip: skip,
              #distinct: distinct,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i9.Link>);

  @override
  _i2.ActionClient<Iterable<_i9.Link>> findMany({
    _i10.LinkWhereInput? where,
    _i2.PrismaUnion<Iterable<_i10.LinkOrderByWithRelationInput>,
            _i10.LinkOrderByWithRelationInput>?
        orderBy,
    _i10.LinkWhereUniqueInput? cursor,
    int? take,
    int? skip,
    _i2.PrismaUnion<_i10.LinkScalar<dynamic>,
            Iterable<_i10.LinkScalar<dynamic>>>?
        distinct,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findMany,
          [],
          {
            #where: where,
            #orderBy: orderBy,
            #cursor: cursor,
            #take: take,
            #skip: skip,
            #distinct: distinct,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<Iterable<_i9.Link>>(
          this,
          Invocation.method(
            #findMany,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #cursor: cursor,
              #take: take,
              #skip: skip,
              #distinct: distinct,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<Iterable<_i9.Link>>(
          this,
          Invocation.method(
            #findMany,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #cursor: cursor,
              #take: take,
              #skip: skip,
              #distinct: distinct,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<Iterable<_i9.Link>>);

  @override
  _i2.ActionClient<_i9.Link> create({
    required _i2
        .PrismaUnion<_i10.LinkCreateInput, _i10.LinkUncheckedCreateInput>?
        data,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #data: data,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i9.Link>(
          this,
          Invocation.method(
            #create,
            [],
            {
              #data: data,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i9.Link>(
          this,
          Invocation.method(
            #create,
            [],
            {
              #data: data,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i9.Link>);

  @override
  _i2.ActionClient<_i10.AffectedRowsOutput> createMany({
    required _i2.PrismaUnion<_i10.LinkCreateManyInput,
            Iterable<_i10.LinkCreateManyInput>>?
        data,
    bool? skipDuplicates,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMany,
          [],
          {
            #data: data,
            #skipDuplicates: skipDuplicates,
          },
        ),
        returnValue: _FakeActionClient_6<_i10.AffectedRowsOutput>(
          this,
          Invocation.method(
            #createMany,
            [],
            {
              #data: data,
              #skipDuplicates: skipDuplicates,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i10.AffectedRowsOutput>(
          this,
          Invocation.method(
            #createMany,
            [],
            {
              #data: data,
              #skipDuplicates: skipDuplicates,
            },
          ),
        ),
      ) as _i2.ActionClient<_i10.AffectedRowsOutput>);

  @override
  _i2.ActionClient<_i9.Link?> update({
    required _i2
        .PrismaUnion<_i10.LinkUpdateInput, _i10.LinkUncheckedUpdateInput>?
        data,
    required _i10.LinkWhereUniqueInput? where,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #data: data,
            #where: where,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i9.Link?>(
          this,
          Invocation.method(
            #update,
            [],
            {
              #data: data,
              #where: where,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i9.Link?>(
          this,
          Invocation.method(
            #update,
            [],
            {
              #data: data,
              #where: where,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i9.Link?>);

  @override
  _i2.ActionClient<_i10.AffectedRowsOutput> updateMany({
    required _i2.PrismaUnion<_i10.LinkUpdateManyMutationInput,
            _i10.LinkUncheckedUpdateManyInput>?
        data,
    _i10.LinkWhereInput? where,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMany,
          [],
          {
            #data: data,
            #where: where,
          },
        ),
        returnValue: _FakeActionClient_6<_i10.AffectedRowsOutput>(
          this,
          Invocation.method(
            #updateMany,
            [],
            {
              #data: data,
              #where: where,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i10.AffectedRowsOutput>(
          this,
          Invocation.method(
            #updateMany,
            [],
            {
              #data: data,
              #where: where,
            },
          ),
        ),
      ) as _i2.ActionClient<_i10.AffectedRowsOutput>);

  @override
  _i2.ActionClient<_i9.Link> upsert({
    required _i10.LinkWhereUniqueInput? where,
    required _i2
        .PrismaUnion<_i10.LinkCreateInput, _i10.LinkUncheckedCreateInput>?
        create,
    required _i2
        .PrismaUnion<_i10.LinkUpdateInput, _i10.LinkUncheckedUpdateInput>?
        update,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsert,
          [],
          {
            #where: where,
            #create: create,
            #update: update,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i9.Link>(
          this,
          Invocation.method(
            #upsert,
            [],
            {
              #where: where,
              #create: create,
              #update: update,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i9.Link>(
          this,
          Invocation.method(
            #upsert,
            [],
            {
              #where: where,
              #create: create,
              #update: update,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i9.Link>);

  @override
  _i2.ActionClient<_i9.Link?> delete({
    required _i10.LinkWhereUniqueInput? where,
    _i10.LinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #where: where,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i9.Link?>(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #where: where,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i9.Link?>(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #where: where,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i9.Link?>);

  @override
  _i2.ActionClient<_i10.AffectedRowsOutput> deleteMany(
          {_i10.LinkWhereInput? where}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMany,
          [],
          {#where: where},
        ),
        returnValue: _FakeActionClient_6<_i10.AffectedRowsOutput>(
          this,
          Invocation.method(
            #deleteMany,
            [],
            {#where: where},
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i10.AffectedRowsOutput>(
          this,
          Invocation.method(
            #deleteMany,
            [],
            {#where: where},
          ),
        ),
      ) as _i2.ActionClient<_i10.AffectedRowsOutput>);

  @override
  _i2.ActionClient<Iterable<_i10.LinkGroupByOutputType>> groupBy({
    _i10.LinkWhereInput? where,
    _i2.PrismaUnion<Iterable<_i10.LinkOrderByWithAggregationInput>,
            _i10.LinkOrderByWithAggregationInput>?
        orderBy,
    required _i2.PrismaUnion<Iterable<_i10.LinkScalar<dynamic>>,
            _i10.LinkScalar<dynamic>>?
        by,
    _i10.LinkScalarWhereWithAggregatesInput? having,
    int? take,
    int? skip,
    _i10.LinkGroupByOutputTypeSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #groupBy,
          [],
          {
            #where: where,
            #orderBy: orderBy,
            #by: by,
            #having: having,
            #take: take,
            #skip: skip,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<Iterable<_i10.LinkGroupByOutputType>>(
          this,
          Invocation.method(
            #groupBy,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #by: by,
              #having: having,
              #take: take,
              #skip: skip,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub:
            _FakeActionClient_6<Iterable<_i10.LinkGroupByOutputType>>(
          this,
          Invocation.method(
            #groupBy,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #by: by,
              #having: having,
              #take: take,
              #skip: skip,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<Iterable<_i10.LinkGroupByOutputType>>);

  @override
  _i2.ActionClient<_i10.AggregateLink> aggregate({
    _i10.LinkWhereInput? where,
    _i2.PrismaUnion<Iterable<_i10.LinkOrderByWithRelationInput>,
            _i10.LinkOrderByWithRelationInput>?
        orderBy,
    _i10.LinkWhereUniqueInput? cursor,
    int? take,
    int? skip,
    _i10.AggregateLinkSelect? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [],
          {
            #where: where,
            #orderBy: orderBy,
            #cursor: cursor,
            #take: take,
            #skip: skip,
            #select: select,
          },
        ),
        returnValue: _FakeActionClient_6<_i10.AggregateLink>(
          this,
          Invocation.method(
            #aggregate,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #cursor: cursor,
              #take: take,
              #skip: skip,
              #select: select,
            },
          ),
        ),
        returnValueForMissingStub: _FakeActionClient_6<_i10.AggregateLink>(
          this,
          Invocation.method(
            #aggregate,
            [],
            {
              #where: where,
              #orderBy: orderBy,
              #cursor: cursor,
              #take: take,
              #skip: skip,
              #select: select,
            },
          ),
        ),
      ) as _i2.ActionClient<_i10.AggregateLink>);
}
